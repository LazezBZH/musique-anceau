const jsonData = {};
fetch("../assets/json/folder2024.min.json")
  .then((e) => e.json())
  .then((e) => Object.entries(e).forEach((e) => (jsonData[e[0]] = e[1])));
const contentHeader = {
  0: "Anceau&nbsp;de&nbsp;Garlande",
  1: "Éducation&nbsp;musicale",
  2: "M.&nbsp;Ben&nbsp;Salah",
  3: "Nous sommes le",
  4: "13 aoÃ»t 1980",
  5: "08 : 45",
  step: 0,
};
var sessionsData, acivity, maxSessions;
const header = document.querySelector("header"),
  main = document.querySelector("main"),
  mainMenu = document.querySelector("main > nav"),
  mainContent = document.querySelector("main > div"),
  displayer = {
    header: document.querySelectorAll("#displayer-infos > span"),
    title: document.querySelector("#display-title"),
    sequence: document.querySelector("#display-sequence"),
    session: document.querySelector("#display-session"),
    sheet: document.querySelector("#display-sheet"),
  },
  buttons = {
    level: document.querySelectorAll(".btn-level"),
    sequence: document.querySelectorAll(".btn-sequence"),
    sequenceOpen: document.querySelectorAll(".btn-sequence_open"),
    session: document.querySelectorAll(".btn-session"),
  },
  sequenceContainer = document.querySelector(".sequence"),
  Animations = class {
    static duration = 500;
    static fadeOut(e) {
      let t = { duration: this.duration, fill: "both", easing: "ease-out" };
      e.animate([{ filter: "blur(0.5vmin) opacity(0)" }], t);
    }
    static translateIn(e, t) {
      let s = {
        duration: this.duration,
        fill: "both",
        easing: "ease-out",
        delay: 100 * t,
      };
      e.animate(
        [
          { filter: "blur(0.5vmin) opacity(0)", transform: "translateX(50vw)" },
          { filter: "blur(0) opacity(1)", transform: "translateX(0)" },
        ],
        s
      );
    }
    static rotateY(e, t, s = 0) {
      let n = { duration: this.duration, fill: "both", easing: "ease-in-out" },
        a = [];
      "in" == t &&
        ((a = [
          { filter: "opacity(0) blur(1vmin)", transform: "rotateY(-90deg)" },
          { filter: "opacity(1) blur(0)", transform: "rotateY(0deg)" },
        ]),
        e.classList.remove("invisible"),
        e.animate(a, { ...n, delay: s })),
        "out" == t &&
          ((a = [
            { filter: "opacity(1) blur(0)", transform: "rotateY(0deg)" },
            { filter: "opacity(0) blur(1vmin)", transform: "rotateY(90deg)" },
          ]),
          e.animate(a, n).finished.then(() => {
            e.classList.add("invisible");
          }));
    }
    static switchInfos(e, t) {
      let s = { duration: this.duration, fill: "both", easing: "ease-in-out" },
        n = [
          { opacity: 1, transform: "rotateX(0deg)" },
          { opacity: 0, transform: "rotateX(90deg)" },
          { opacity: 0, transform: "rotateX(-90deg)" },
          { opacity: 1, transform: "rotateX(0deg)" },
        ];
      e.animate([n[0], n[1]], s).finished.then(() => {
        (e.innerHTML = t), e.animate([n[2], n[3]], s);
      });
    }
    static switchSession(e) {
      let t = { duration: this.duration, fill: "both", easing: "ease-in-out" },
        s = [{ opacity: 0 }, { opacity: 1 }];
      displayer.sheet.animate([s[0]], t).finished.then(() => {
        displayer.sheet.animate([s[1]], t);
      });
    }
    static startPoint() {
      let e = { duration: 2 * this.duration, fill: "both", easing: "ease-out" };
      header.animate([{ left: 0, top: 0 }], e);
    }
  };
function updateHeader() {
  let e = new Date(),
    t = "fr-FR";
  (contentHeader[4] = e.toLocaleDateString(t, {
    day: "2-digit",
    month: "long",
    year: "numeric",
  })),
    (contentHeader[5] = e
      .toLocaleTimeString(t, {
        hour: "2-digit",
        hourCycle: "h23",
        minute: "2-digit",
      })
      .replace(":", "<span id='dots'> : </span>")),
    displayer.header.forEach((e, t) => {
      setTimeout(() => {
        Animations.switchInfos(e, contentHeader[contentHeader.step]),
          (contentHeader.step =
            contentHeader.step < 5 ? contentHeader.step + 1 : 0);
      }, 100 * t);
    });
}
function engraveSession(e) {
  let t = new ArticleList(),
    s = new ArticleFactory();
  (acivity = sessionsData.filter((t) => t.sessionId == e)).forEach((e) => {
    let n = s.build(e);
    t.add(n), t.build(t.all);
  });
}
function engraveSequence(e, t, s) {
  buttons.sequenceOpen.forEach((e, n) => {
    n < s && n != t - 1 ? e.classList.remove("hide") : e.classList.add("hide");
  });
  let n = "";
  e[0].opus.forEach((e) => (n += `<p>${e}</p>`));
  let a = "";
  if (1 === e[0].opus.length) a = "Œuvre";
  else a = "Œuvres";
  let i = `\n        <div>\n            <div><h2>${a}</h2>${n}</div>\n            <div><h2>Projet musical</h2><p>${
    e[0].project
  }</p></div>\n            <div><h2>Notions et vocabulaire</h2><p>${e[0].notions.join(
    ", "
  )}</p></div>\n        </div>\n        <p class="comment">${e[0].comment}</p>`;
  (displayer.title.innerHTML = `<span>Séquence n°${t}&emsp;-&emsp;</span>${e[0].title}`),
    (displayer.sequence.innerHTML = i);
}
buttons.level.forEach((e) => {
  e.addEventListener("click", () => {
    let t = e.getAttribute("data-ref"),
      s = main.getAttribute("data-step"),
      n = jsonData.sequences.filter((e) => e.levelId == t),
      a = n.length;
    buttons.level.forEach((e) => e.classList.remove("selected")),
      e.classList.add("selected"),
      1 != s &&
        (Animations.rotateY(mainMenu, "in"),
        2 == s && Animations.rotateY(mainContent, "out"),
        main.setAttribute("data-step", 1)),
      buttons.sequence.forEach((e) => Animations.fadeOut(e)),
      setTimeout(() => {
        buttons.sequence.forEach((e, s) => {
          s < a ? e.classList.remove("hide") : e.classList.add("hide"),
            s < a &&
              ((e.innerHTML = `\n                    <span>N°&nbsp;${
                s + 1
              }</span>\n                    <span class="bull">&#8226;</span>\n                    <span class="title">${
                n[`${s}`].title
              }</span>`),
              e.setAttribute("data-ref", t),
              Animations.translateIn(e, s));
        });
      }, Animations.duration);
  });
}),
  buttons.sequence.forEach((e) => {
    e.addEventListener("click", () => {
      let t = e.getAttribute("data-ref"),
        s = e.getAttribute("data-key"),
        n = jsonData.sequences.filter((e) => e.levelId == t),
        a = n.filter((e) => e.sequenceId == s),
        i = n.length;
      Animations.rotateY(mainMenu, "out"),
        Animations.rotateY(mainContent, "in", Animations.duration),
        main.setAttribute("data-step", "2"),
        buttons.sequence.forEach((e) => Animations.fadeOut(e)),
        (sessionsData = jsonData.activities.filter(
          (e) => e.levelId == t && e.sequenceId == s
        )),
        (acivity = sessionsData.filter((e) => e.sessionId == s));
      let o = sessionsData.indexOf(sessionsData[sessionsData.length - 1]);
      (maxSessions = 0),
        sessionsData.length > 0 && (maxSessions = sessionsData[o].sessionId),
        maxSessions < 1 || !maxSessions
          ? displayer.session.classList.add("hide")
          : (displayer.session.classList.remove("hide"),
            buttons.session.forEach((e, t) => {
              t > 0
                ? e.classList.remove("in")
                : buttons.session[0].classList.add("in"),
                t < maxSessions
                  ? e.classList.remove("hide")
                  : e.classList.add("hide");
            }),
            engraveSession(1)),
        buttons.sequenceOpen.forEach((e) => {
          e.setAttribute("data-ref", t);
        }),
        buttons.sequenceOpen.forEach((e) => {
          e.addEventListener("click", () => {
            let t = e.getAttribute("data-ref"),
              s = e.getAttribute("data-key"),
              n = jsonData.sequences.filter((e) => e.levelId == t),
              a = n.filter((e) => e.sequenceId == s),
              i = n.length;
            Animations.rotateY(mainMenu, "out"),
              Animations.rotateY(mainContent, "in", Animations.duration / 10),
              (sessionsData = jsonData.activities.filter(
                (e) => e.levelId == t && e.sequenceId == s
              )),
              (acivity = sessionsData.filter((e) => e.sessionId == s));
            let o = sessionsData.indexOf(sessionsData[sessionsData.length - 1]);
            (maxSessions = 0),
              sessionsData.length > 0 &&
                (maxSessions = sessionsData[o].sessionId),
              maxSessions < 1 || !maxSessions
                ? displayer.session.classList.add("hide")
                : (displayer.session.classList.remove("hide"),
                  buttons.session.forEach((e, t) => {
                    t > 0
                      ? e.classList.remove("in")
                      : buttons.session[0].classList.add("in"),
                      t < maxSessions
                        ? e.classList.remove("hide")
                        : e.classList.add("hide");
                  }),
                  engraveSession(1)),
              engraveSequence(a, s, i, t);
          });
        }),
        engraveSequence(a, s, i, t);
    });
  }),
  buttons.session.forEach((e) => {
    e.addEventListener("click", () => {
      let t = e.getAttribute("data-ref");
      (acivity = sessionsData.filter((e) => e.sessionId == t)),
        buttons.session.forEach((e) => e.classList.remove("in")),
        e.classList.add("in"),
        Animations.switchSession(t),
        setTimeout(() => {
          engraveSession(t);
        }, "400");
    });
  }),
  updateHeader(),
  setInterval(() => {
    updateHeader();
  }, 8e3),
  Animations.startPoint();
